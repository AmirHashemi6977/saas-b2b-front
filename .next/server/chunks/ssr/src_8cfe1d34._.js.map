{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///E:/Saas_B2B%20Project/Front/saas-b2b-front/src/i18n/routing.ts"],"sourcesContent":["import { defineRouting } from \"next-intl/routing\";\r\n\r\nexport const routing = defineRouting({\r\n  // A list of all locales that are supported\r\n  locales: [\"fa\", \"en\", \"hy\"] as const,\r\n\r\n  // Used when no locale matches\r\n  defaultLocale: \"fa\",\r\n});\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,UAAU,CAAA,GAAA,kOAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,2CAA2C;IAC3C,SAAS;QAAC;QAAM;QAAM;KAAK;IAE3B,8BAA8B;IAC9B,eAAe;AACjB","debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///E:/Saas_B2B%20Project/Front/saas-b2b-front/src/i18n/request.ts"],"sourcesContent":["import { getRequestConfig } from \"next-intl/server\";\r\nimport { hasLocale } from \"next-intl\";\r\nimport { routing } from \"./routing\";\r\n\r\nexport default getRequestConfig(async ({ requestLocale }) => {\r\n  // Typically corresponds to the `[locale]` segment\r\n  const requested = await requestLocale;\r\n  const locale = hasLocale(routing.locales, requested)\r\n    ? requested\r\n    : routing.defaultLocale;\r\n\r\n  return {\r\n    locale,\r\n    messages: (await import(`../messages/${locale}.json`)).default,\r\n  };\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;uCAEe,CAAA,GAAA,0PAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAE,aAAa,EAAE;IACtD,kDAAkD;IAClD,MAAM,YAAY,MAAM;IACxB,MAAM,SAAS,CAAA,GAAA,iLAAA,CAAA,YAAS,AAAD,EAAE,sHAAA,CAAA,UAAO,CAAC,OAAO,EAAE,aACtC,YACA,sHAAA,CAAA,UAAO,CAAC,aAAa;IAEzB,OAAO;QACL;QACA,UAAU,CAAC;;;;;;;;;;;;;kBAAa,CAAC,YAAY,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO;IAChE;AACF","debugId":null}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["file:///E:/Saas_B2B%20Project/Front/saas-b2b-front/src/app/%5Blocale%5D/layout.tsx"],"sourcesContent":["import { NextIntlClientProvider, hasLocale } from \"next-intl\";\r\nimport { notFound } from \"next/navigation\";\r\nimport { routing } from \"i18n/routing\";\r\n\r\nexport default async function LocaleLayout({\r\n  children,\r\n  params,\r\n}: {\r\n  children: React.ReactNode;\r\n  params: Promise<{ locale: string }>;\r\n}) {\r\n  // Ensure that the incoming `locale` is valid\r\n  const { locale } = await params;\r\n  if (!hasLocale(routing.locales, locale)) {\r\n    notFound();\r\n  }\r\n\r\n  return (\r\n    <html lang={locale}>\r\n      <body>\r\n        <NextIntlClientProvider>{children}</NextIntlClientProvider>\r\n      </body>\r\n    </html>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAAA;AACA;;;;;AAEe,eAAe,aAAa,EACzC,QAAQ,EACR,MAAM,EAIP;IACC,6CAA6C;IAC7C,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM;IACzB,IAAI,CAAC,CAAA,GAAA,iLAAA,CAAA,YAAS,AAAD,EAAE,sHAAA,CAAA,UAAO,CAAC,OAAO,EAAE,SAAS;QACvC,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACT;IAEA,qBACE,8OAAC;QAAK,MAAM;kBACV,cAAA,8OAAC;sBACC,cAAA,8OAAC,kQAAA,CAAA,yBAAsB;0BAAE;;;;;;;;;;;;;;;;AAIjC","debugId":null}}]
}